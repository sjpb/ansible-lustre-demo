- hosts: servers
  tags: servers
  become: yes
  tasks:
    - name: Enumerate devices
      lsbkl:
      register: lsblk
      changed_when: false
    - debug:
        var: lsblk
    - assert:
        that:
          - lsblk.devices['45da89db-6c07-461e-a'] == '/dev/sdb' # MGS (NB: under EL8 these are vd*)
          - lsblk.devices['5394d5fe-4dda-44a5-a'] == '/dev/sdc' # MDT
          - lsblk.devices['c51788e8-9660-4487-b'] == '/dev/sdd' # OST

    - name: Disable SELinux
      ansible.posix.selinux:
        state: disabled
      register: selinux
    
    - name: Install patched kernels for lustre
      import_role:
        name: ansible-role-linux-kernel
      when: lustre_install_type == 'server'
    
    - name: Install latest kernel packages
      yum:
        name: "{{ kernel_pkgs }}"
        state: latest
      when: lustre_install_type == 'patchless-ldiskfs-server'
      vars:
        kernel_pkgs:
          - kernel
          - kernel-devel
          - kernel-headers
          - kernel-tools
          - kernel-tools-libs
          - kernel-tools-libs-devel
      register: kernel_install
      
    - name: Reboot
      reboot:
      when: kernel_install.changed | default('false') or selinux.reboot_required
    
    - name: Install lustre server
      import_role:
        name: ansible-role-lustre
    
    - name: List NIDs
      tags: checks
      command:
        cmd: lctl list_nids
      register: _lctl_nids
      failed_when: (_lctl_nids.rc != 0) or ('@' not in _lctl_nids.stdout)

    - name: List lustre devices
      tags: checks
      command:
        cmd: lctl dl
      register: _lctl_dl
    
    - name: Assert server components running
      tags: checks
      assert:
        that: item in _lctl_dl.stdout
        fail_msg: "Did not find '{{ item }}' in lctl dl output"
      loop:
        - UP mgs
        - UP mgc
        - UP mds
        - UP mdt
        - UP ost

- hosts: clients
  tags: clients
  become: yes
  tasks:
    - name: Gather facts from MGS
      setup:
      delegate_to: "{{ groups['servers'][0] }}"
      delegate_facts: True
    
    - name: Install lustre client
      import_role:
        name: ansible-role-lustre
    
    - name: Ensure mount point exists
      file:
        path: "/mnt/{{ lustre_fsname}}"
        state: directory
        # TODO owner, mode

    - name: Mount lustre fileysystem
      mount:
        src: "{{ hostvars[groups['servers'][0]]['ansible_facts']['eth0']['ipv4']['address'] }}@tcp1:/{{ lustre_fsname }}"
        path: /mnt/lustre
        fstype: lustre
        state: "{{ client_mount_state | default('mounted') }}"
